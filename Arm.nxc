#define RTOD 57.2957795
#define DTOR 0.01745329252392839860045886974973
// Constants to convert to/from radians/degrees.

#define WRATIO 0.011904762
#define VRATIO 0.028571429
#define URATIO 0.0375
// Ratios of the geartrains on each motor.

#define VMAG 25
#define UMAG 23
// Lengths of the limbs
#define VAMAX 120
#define VAMIN 40
#define UAMAX 75
#define UAMIN -70
// Angle limits of the limbs
#define TOLERANCE 1
// Tolerance required (in end result degrees) to go onto the next command/flip the xRunning variables.

float setW=0, setV=90, setU=0;
// Motor setpoints, in the end result degrees
bool wRunning, vRunning, uRunning;
// Whether or not a motor is running



void RunMotor(byte port, float power){
  if(power>100)
    power=100;
  if(power<-100)
    power=-100;

  if(power>0){
    OnFwdEx(port, power, RESET_NONE);
  }else if(power<0){
    OnRevEx(port, -power, RESET_NONE);
  }else{
    OffEx(port, RESET_NONE);
  }
}
// Simplifies running a motor, so that negative and out of range values do not cause issues.

void WaitTC(){
  vRunning=uRunning=wRunning=true;
  while(wRunning || vRunning || uRunning)
    Wait(10);
}
// Waits until no motors are running.

inline void GotoW(float w){
  vRunning=uRunning=wRunning=true;
  setW=w;
}
// Sets the W setpoint.

void MoveW(float w){
  vRunning=uRunning=wRunning=true;
  setW=w;
  while(wRunning)
    Wait(10);
}
// Goes to a point in the W axis.

bool GotoAZ(float a, float z){
  float tMag=sqrt(a*a + z*z); // Magnitude of the target.
  float tAngle=atan2(z,a);    // Angle of the target (in radians)
  float vAngle, uAngle;       // Angles of the arms
  if(tMag<=VMAG+UMAG && tMag>=abs(VMAG-UMAG)){ // If inside of reach
    vAngle= acos((VMAG*VMAG + tMag*tMag - UMAG*UMAG)/(2*VMAG*tMag))+tAngle;
    uAngle= acos((VMAG*VMAG + UMAG*UMAG - tMag*tMag)/(2*VMAG*UMAG))-(PI-vAngle);
    // Use law of cosines to determine the angles based off the magnitudes of the limbs and target.
    vAngle=RTOD*vAngle;
    uAngle=RTOD*uAngle;
    // Convert angles into degrees
    if(vAngle<VAMAX && vAngle>VAMIN && uAngle<UAMAX && uAngle>UAMIN){ // If within bounds
      vRunning=uRunning=wRunning=true;
      setU=uAngle;
      setV=vAngle;
      return true;
      // Execute the calculations and return true.
    }else{ // If outside of bounds
      PlayTone(1000,600);
      return false;
      // Beep high-pitched and return false.
    }
  }else{ // If outside of reach
    PlayTone(400,400);
    return false;
    // Beep lower-pitched and return false.
  }
}
// Goes to a point in the A-Z plane. Returns false if unable to reach the given point.

void MoveAZ(float endA, float endZ, float frequency=0.5){
  float startA=cos(setU*DTOR)*UMAG + cos(setV*DTOR)*VMAG;
  float startZ=sin(setU*DTOR)*UMAG + sin(setV*DTOR)*VMAG;
  //Calculate our initial position in the A-Z plane.
  float runMagnitude=sqrt((endA-startA)*(endA-startA) + (endZ-startZ)*(endZ-startZ));
  float runAngle=atan2((endZ-startZ),(endA-startA));
  // Turn that into a angle and magnitude.
  
  for(float i=1;i<runMagnitude;i+=frequency){ // Iterate the magnitude by the given frequency until we are at our destination.
    GotoAZ(cos(runAngle)*i + startA, sin(runAngle)*i + startZ);
    // Go to the the currently iterated 
    while(vRunning || uRunning)
      Wait(10);
    // Wait till done moving to the point.
  }
  
  GotoAZ(endA, endZ);
  // Go to the end point (just to be safe)
  while(vRunning || uRunning)
    Wait(10);
}
// Makes a straight line in the A-Z plane, with an optional frequency. (Lower number generates smoother movement.)

inline void Reset(){
  setW=0;
  setU=0;
  setV=90;
  WaitTC();
}
// Resets the arm to its initial state.

task backUpdate(){
  while(true){
    RunMotor(OUT_A,((MotorTachoCount(OUT_A)*WRATIO)-setW)*-400);
    RunMotor(OUT_C,((MotorTachoCount(OUT_C)*URATIO)-setU)*-170);
    RunMotor(OUT_B,((90 - MotorTachoCount(OUT_B)*VRATIO)-setV)*170);
    wRunning=abs((MotorTachoCount(OUT_A)*WRATIO)-setW)>TOLERANCE;
    uRunning=abs((MotorTachoCount(OUT_C)*URATIO)-setU)>TOLERANCE;
    vRunning=abs((90 - MotorTachoCount(OUT_B)*VRATIO)-setV)>TOLERANCE;
    ResetSleepTimer();
  }
  OffEx(OUT_ABC,RESET_NONE);
}
// The motor monitoring thread

task main(){
  start backUpdate;
  Wait(100);
  // Start up the motor monitoring thread

}